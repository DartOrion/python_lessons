# *** Основы объектно-ориентированного программирвоания ***

# Объект принадлежит определенному классу (Типу)
# Объекты обладают свойсвами и методами (Функции)

# Класс - некий "Чертеж" ("План") объектов

# Объект определенного класса называется экземпляром класса.

# Создание (опрееленного) класса
# Названия классов принято писать с Заглавной буквы
class Laika: 
    def __init__(self):
        #  метод-конструктор
        # здесь создаются свойсва (атрибуты, поле)

        self.age = None

    def gav(self):
        # метод 
        print(f"гав-Гав! Мой вес:{self.age}")

# создание экземпляров (объектов) класс Laika
tuzik = Laika()

#  присвоение значения свойсву
tuzik.age = 5

# чтение значение из свойсва
val = tuzik.age

# print(val)

# вызов метода
# tuzik.gav()

# еще один экземпляр класса Laika
sharik = Laika()

sharik.age = 10

# sharik.gav()


# *** Принцип наследования ***

# Классы могу наследовать свойсва и методы у других классов
#  создание родительского (предкового) класса
class Cat:
    def __init__(self, n_legs):
        self.num_legs = n_legs

    def move(self):
        print(f"I move. Num legs: {self.num_legs}")

# Создание дочерних классов 
class Cat_1(Cat):
    pass

class Cat_2(Cat):
    def info(self):
        print(f"I am Cat_2")

murka = Cat_1(4)

murka.move()

boris = Cat_2(4)

boris.move()
boris.info()

# самостоятельно: Узнать 
# - Полиморфизм
# - Икапсуляция
# - Композиция